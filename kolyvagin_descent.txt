E:=EllipticCurve("37a1");
p:=11;
D:=-2731;
prec:=250;
procedure kol(E,d,p,prec,opt);
// Input data: an elliptic curve E, a Heegner discriminant D, and a prime p. Output data: if succesful, a Heegner point defined over the ring class field associated to D
// from which one can obtain a an element of Sha(E/Q)[p] using Kolyvagin's construction. 

prec:=250;
Cf:=ComplexField(prec);

// prec is the precision used when invoking ModularParametrization. It determines the precision of the floating point approximations to the Heegner point. 
// If the algorithm does not succeed, increase the value of prec. Parameter opt specifies whether the equation for the number field L is optimised.
// If D is very large, it might be better to set opt to zero.


K:=QuadraticField(D);
p:=ClassNumber(K);
OK:=MaximalOrder(K);

La:=AbelianExtension(1*OK);
OL:=MaximalOrder(La);

L:=NumberField(La);
am:=ArtinMap(La);

L:=AbsoluteField(L);
if opt then L:=OptimisedRepresentation(L); end if;
OL:=RingOfIntegers(L);
bas:=Basis(OL);
G:=Automorphisms(L);
j:=2;
while G[j]^p ne G[1] do j:=j+1; end while;
sigma:=G[j];
j:=2;
while G[j]^2 ne G[1] do j:=j+1; end while;
cc:=G[j];

//L is the ring class field associated to D. It is a dihedral extension of Q.

print "Equation for the dihedral number field over which the Heegner point is defined"; 
L;


HF := HeegnerForms(E,D : Use_wQ:=false, UseAtkinLehner:=false);
Hforms := [x[1] : x in HF];
OK:=RingOfIntegers(K);
Cl, fromCl := RingClassGroup(OK);

forms_id:=[(Ideal(h)/Ideal(Hforms[1])) : h in Hforms];
Q:=QuadraticForms(D);

aut:=[am(i): i in forms_id];

// The variable Hforms is the array of Galois conjugates of a Heegner point, viewed as quadratic surds, or elements in the upper half-plane. 
// We compute the Galois action on Hforms explicitly using class field theory (Artin map). 

time Hpt := ModularParametrization(E,Hforms : Precision:=prec);
Hpts:=[EllipticExponential(E,pt) : pt in Hpt];

//Hpts are (floating point approximations to) Heegner points, now viewed as actual points on a Weierstrass model of E.


//the following function uses the LLL algorithm to guess an algebraic expression for the denominator of the x-coordinate of the Heegner point, as explained
// in my thesis. The way this is coded now, it needs a second parameter s, which takes value -1 or 1. It is introduced because of an ambiguity - 
// Artin map gives as an isomorphism Z/p=Cl(L)=Gal(L/K). Instead of considering 2p Galois conjugates of the Heegner point, we break them up into two sets of p conjugates
// related by complex conjugation, and try to guess the denominator for two sets separately, according to whether s=1 or -1. As coded now, for one set it will always return nonsense,
// because the Galois action would not be normalised correctly, and for the other set it will return the correct answer, if enough precision is used.

//It is entirely possible that the above convoluted method does not actually give any meaningful improvement over just looking at all 2p conjugates simultaneously.


function rpt(Hpts,s);

pl1:=InfinitePlaces(L)[1];
aut:=[am(i^(-s)): i in forms_id];

function em(x);

ex:=[];
for i in [1..p] do
	ex[i]:=Cf!Evaluate(aut[i](x),pl1 : Precision:=prec);
end for;
return ex;
end function;

function rec(conj);
A:=[];
for i in [1..2*p] do A[i]:=em(bas[i]); end for;
for i in [2*p+1..4*p] do A[i]:=[A[i-2*p][j]*conj[j] : j in [1..p]]; end for;

A1:=[];
for j in [1..4*p] do 
	A1[j]:=[];
	for i in [1..p] do
		A1[j][2*i-1]:=Real(A[j][i]);
		A1[j][2*i]:=Imaginary(A[j][i]);
	end for;
end for;

A2:=[[i eq j select 1 else 0 : i in [1..4*p]] : j in [1..4*p]];

H:=10^prec;
A1:=[[Round(H*A1[i][j]) : j in [1..2*p]] : i in [1..4*p]];

//final matrix used to recognize the Heegner point:


mL:=[A2[i] cat A1[i] : i in [1..4*p]];
return Matrix(mL);
end function;

xc:=[Hpts[i][1] : i in [1..p]];
mL:=rec(xc);
bla,b:=LLL(mL : Proof:=false, EarlyReduction:=true, Fast:=1);

test:=-&+[b[1][i]*bas[i] : i in [1..2*p]]/&+[b[1][i]*bas[i-2*p] : i in [2*p+1..4*p]];
r:=-&+[b[1][i]*bas[i] : i in [1..2*p]];
t:=&+[b[1][i]*bas[i-2*p] : i in [2*p+1..4*p]];

tp:=em(t^2);
yc:=[tp[i]*Hpts[i][2] : i in [1..p]];

bla,b:=LLL(rec(yc) :  Proof:=false, EarlyReduction:=true, Fast:=1);
sy:=-&+[b[1][i]*bas[i] : i in [1..2*p]];
ty:=&+[b[1][i]*bas[i-2*p] : i in [2*p+1..4*p]];


if ty eq 0 then return 0; 
	else
	testy:=sy/(t^2*ty);
	Fe:=Evaluate(Equation(E),[test,testy,1]);
	if Fe eq 0 then return E(L)![test,testy,1]; 
		else
		return 0;
	end if;
end if;


end function;

function recpt(Hpts);
s:=1;
pt:=rpt(Hpts,1);
if pt cmpeq 0 then pt:=rpt(Hpts,-1); s:=-1; end if;
return pt;
end function;

// Instead of computing the Heegner point directly, we subtract from it 1/p*(y_K), where y_K is the basic Heegner point y_K=Trace_(L/K). There are p^2 candidates for 1/p*(y_K),
// so we try each in turn, until we recognize the point. 

//pt:=recpt(Hpts);
//R:=pt-ptr;



trlat:=&+[h: h in Hpt]; 
trlatcc:=Conjugate(trlat);

rp,ip:=Explode(Periods(E : Precision:=prec));
for i in [1..p] do
for j in [1..p] do
pdc:=(trlat+i*rp+j*ip)/p;
testreal:=EllipticExponential(E,pdc)[1];
HPc:=[EllipticExponential(E,Hpt[i]-pdc) : i in [1..p]];
time R1:=recpt(HPc); 
if R1 cmpne 0 then R:=R1; end if;
end for;
end for;


function gp(g,R);
return E(L)![g(R[1]),g(R[2])];
end function;

p1:=InfinitePlaces(L)[1];

Rst:=E(L)![sigma(cc(R[1])),sigma(cc(R[2]))];
R1:=Rst-R;


E1,wmap:=WeierstrassModel(E);
R:=E1(L)![wmap(R1)[1],wmap(R1)[2],wmap(R1)[3]];



print "Coordinates of the point R, for which the Kolyvagin derivative P=D_sigma * R satisfies the conditions of Lemma 4.2";
R;






//Code to compute a Kolyvagin class from a Heegner point on an elliptic curve
//We assume that the following input is given:
// An elliptic curve E/Q, a quadratic field K, an extension L/K of degree p, and a point R in E(L)
// The point R should satisfy the following conditions: Tr_{L/K}(R)=0_E, and R+sigma(tau(R))=0_E,
//sigma a generator of Gal(L/K), tau a lift of complex conjugation to Gal(L/Q). 

//Given such data, the code will produce a minimized and reduced model of the Kolyvagin class, given as an intersection of quadrics in projective space
//as explained in the paper "Explicit realisation of elements of the Tate-Shafarevich group constructed from Kolyvagin classes", referred to as [1] in comments below.



if AnalyticRank(E) ge 1 then E:=MinimalModel(QuadraticTwist(E,D)); end if;

//if the curve has rank 1, the Kolyvagin class will naturally be an element of the Tate-Shafarevich group of its quadratic twist.


K:=QuadraticField(D);
n:=p;
OL:=MaximalOrder(L);

p1:=InfinitePlaces(L)[1];
G:=Automorphisms(L);


d2,R1:=IsDivisibleBy(R,2);
if d2 then R:=R1; end if; 

E1:=ChangeRing(E1,L);
R:=E1!R;
R3<x,y>:=FunctionField(E1);


Rconj:=[E1![(sigma^i)(R[1]),(sigma^i)(R[2])] : i in [0..p-1]];
P:=[&+[Rconj[i]: i in [1..k]]: k in [1..p-1]];
P:=[-Rpt: Rpt in P];
P1:=[];
P1[1]:=E1!0;
for i in [2..p] do
	P1[i]:=P[i-1];
end for;

P:=P1; 
PR:=[R+Rt: Rt in P];

xR:=R[1];
yR:=R[2];

lrs:=[((P[i+1][2])+(-R)[2])/((-R)[1]-(P[i+1][1])) : i in [2..(p-1)]];
lrs[p]:=R3!1;

//lrs is the basis l1,l2,...lp defined in Section 4 of [1].

print "The basis l1,l2,...,lp defined in Section 4.2";
lrs;


function cf(k);
c:=[L!0 : i in [1..p]];
if (1 lt k) and (k lt p) then
c[k-1]:=1;
c[p-1]:=-1;
c[p]:=L!lrs[k-1];
end if;
if k eq 1 then c[p-1]:= L!(-1); end if;
if k eq p then c[p]:=1; end if;
return c;
end function;

M:=Matrix([cf(i): i in [1..p]]);

//The matrix M is the matrix Msigma computed in Prop 4.8 of [1]. Next step is to minimize the model as explained in Section 5 of [1].


print "The matrix Msigma defined in Prop 4.8";
M;


function g(aut,M);
    c:=[];
    for j in [1..p] do
        c[j]:=[];
        for k in [1..p] do
            c[j][k]:=aut(M[j][k]);
        end for;
    end for;
    c:=Matrix(c);
    return c;
end function;

// function rst expresses a point (x,y) in E(L) in the form (r/t^2,s/t^3) - such a representation exists, as by assumption OL is a PID.

function rst(P);
	id:=ideal<OL|[P[1],OL!1]>;
	_,gen:=IsPrincipal(id);
	den:=1/gen;
	t1:=den;

	id:=ideal<OL|[P[2],OL!1]>;
	_,gen:=IsPrincipal(id);
	den:=1/gen;

	t2:=den;
	s:=t2*P[2];

	t:=t2/t1;
	r:=P[1]*t^2;
	s:=P[2]*t^3;
	return L!r,L!s,L!t;
end function;

r:=[];
s:=[];
t:=[];
for i in [2..p] do r[i-1],s[i-1],t[i-1]:=rst(P[i]); end for;

Pd:=[];
RR<X,Y>:=PolynomialRing(L,2);
Pw:=[];
Pw[1]:=RR!1;
for i in [1..(p-1)] do
Pw[2*i]:=X^i;
Pw[2*i+1]:=X^(i-1)*Y;
end for;




//function below is the inductive step in a procedure to multiply l1,...,lp with a suitable function
//so that they form a basis of L(D'), as explained in 5.1.3 of [1].
//the output is a matrix representing these functions wrt the standard basis 1,x,y,x^2,...

function uP(C);
	n:=#Rows(C);
	C1:=[];

	for i in [1..n] do
		g:=&+[C[i][j]*Pw[j] : j in [1..2*n-1]];
		g:=g*(t[n]^2*X-r[n]);
		C1[i]:=[MonomialCoefficient(g,Pw[j]) : j in [1..2*n+1]];
	end for;

	f:=RR!1;
	for j in [1..n-1] do
		f:=f*(t[j]^2*X-r[j]);
	end for;
	f:=f*(t[n]^3*Y+s[n]);

	C1[n+1]:=[MonomialCoefficient(f,Pw[j]) : j in [1..2*n+1]];

return Matrix(C1);
end function;


function ig(id);
	_,g:=IsPrincipal(id);
	return g;
end function;

RR<X,Y>:=PolynomialRing(L,2);
Pw:=[];
Pw[1]:=RR!1;
for i in [1..(p-1)] do
Pw[2*i]:=X^i;
Pw[2*i+1]:=X^(i-1)*Y;
end for;

//Next step is to "Gaussian elimination" explained in 5.1.3 of [1]. The next three functions  compute
//which multiple of row j should be subtracted from row i in the matrix Cl.

function matrep(i,j);
	i:=i-1;
	j:=j-1;
	if i gt 0 then 
		fi:=(t[i]^3*Y+s[i])*(t[j]^2*X-r[j]);
		fj:=(t[j]^3*Y+s[j])*(t[i]^2*X-r[i]);

		C1:=[];
		C1[1]:=[MonomialCoefficient(fi,Pw[j]) : j in [1..5]];
		C1[2]:=[MonomialCoefficient(fj,Pw[j]) : j in [1..5]];
		return Matrix(C1);

	else
		return Matrix(L,2,3,[[-r[j],t[j]^2,0],[s[j],0,t[j]^3]]);
	end if;
end function;

function min_id(k,l);
	l:=l-1;
	k:=k-1;

	if k gt 0 then
		return ideal<OL|(sigma^k)(t[l-k])>;
	else 	
		return ideal<OL|t[l]^2>; 
	end if;
end function;

function ech(k,l);

	Or:=quo<OL|min_id(k,l)>;
	Cr:=Matrix(Or,matrep(k,l));
	Ce,T:=EchelonForm(Cr);

	T:=T/T[2][2];
	T[1][1]:=1;
	T[1][2]:=0;
	return L!(Matrix(OL,T)[2][1]),Ce;
end function;

//The function minrow then performs a single step of Gaussian elimination by using an effective Chinese remainder theorem
//to subtract all rows below row i from the row i at once. 

function minrow(l);
	if l eq 1 then 
		Tl:=[0 : i in [1..p]];
		Tl[1]:=1;
	else
		mc:=[min_id(k,l) : k in [1..l-1]];
		Tc:=[ech(k,l) : k in [1..l-1]];
		ip:=[];
		stupidf:=L!1;
		for i in [1..l-1] do
			tmp:=ig(mc[i]+&*[m : m in mc]/mc[i]);
			_,_,ip[i]:=Idempotents(mc[i]/tmp,&*[m : m in mc]/(mc[i]*tmp));
			stupidf:=stupidf*tmp;
		end for;
		Tl:=[Tc[i]*ip[i] : i in [1..l-1]];
		Tl[l]:=1;
		for i in [l+1..p] do Tl[i]:=0; end for; 
		pr:=&*[ig(m) : m in mc];
		Tl:=[t/pr : t in Tl];
	end if;
	return Tl;
end function;

time T:=Matrix([minrow(l) : l in [1..p]]);
C1:=Matrix(L,2,3,[[-r[1],t[1]^2,0],[s[1],0,t[1]^3]]);
for i in [1..p-2] do C1:=uP(C1); end for;
C2:=T*C1;

dn:=[Denominator(d) : d in Eltseq(C2)];
d:=LCM(dn);
Or:=quo<OL|ideal<OL|d>>;
C2:=d*C2;
T:=d*T;
Cr:=Matrix(Or,C2);

for i in [1..p] do
	dn:=ig(ideal<OL|Eltseq(Cr[i])>+ideal<OL|d>);
	T[i]:=T[i]/dn;
	C2[i]:=C2[i]/dn;
end for;

M:=Matrix([cf(i): i in [1..p]]);

Mcc:=ZeroMatrix(L,p,p);
for i in [1..p-1] do Mcc[i][p-i]:=1; end for;
Mcc[p][p]:=1;


//move the constant function to be the first element of the basis and rescale the basis - conventions
conv:=ZeroMatrix(L,p,p);
for i in [1..p-1] do conv[i+1][i]:=1; end for;
conv[1][p]:=1;
 
sc:=IdentityMatrix(L,p);
for i in [1..p-1] do sc[i+1][i+1]:=t[i]; end for;

Tinv:=conv^(-1)*sc^(-1)*T^(-1);

//Tinv is the matrix representing the basis of L(D') after Gaussian elimination.





//convert a matrix to a sequence and vice versa

OL:=RingOfIntegers(L);
bas:=Basis(OL);



//We translate cocycle data Msigma to description of a semilinear Galois action, and compute the image of the trace map

trace:=[];
for k in [1..2*p] do
M_tw:=bas[k]/sigma(bas[k])*M;
Mcc_tw:=bas[k]/cc(bas[k])*Mcc;

m:=M_tw^(-1);
mc:=Mcc_tw^(-1);

cyclic:=[];
cyclic[1]:=G[1];
for i in [2..p] do cyclic[i]:=sigma^(i-1); end for;

coi:=[];
coi[1]:=IdentityMatrix(L,p);
for k in [2..p] do
	coi[k]:=g(cyclic[k-1],m)*coi[k-1];
end for;
co2i:=[g(cc,coi[i])*mc : i in [1..p]];

trace1:=[c : c in coi];
trace2:=[c : c in co2i];

trace[k]:=&+[t: t in trace1]+&+[t: t in trace2];
trace[k]:=trace[k]*bas[k];

end for;

tr:=[t*Tinv : t in trace];

inv:=[];
for i in [1..2*p] do 
	for j in [1..p] do 
		inv[(i-1)*p+j]:=Rows(tr[i])[j];
		den:=LCM([Denominator(d) : d in Eltseq(inv[(i-1)*p+j])]);
		inv[(i-1)*p+j]:=inv[(i-1)*p+j]*den;
	end for;
end for;

inv:=Matrix(inv);
inv2:=inv*C2;

invQ:=[];
for i in [1..2*p^2] do
invQ[i]:=[];
for j in [1..2*p-1] do
	for k in [1..2*p] do
	invQ[i][2*p*(j-1)+k]:=(OL!inv2[i][j])[k];
	end for;
end for;
end for;



invQm:=Matrix(invQ);
lat:=Lattice(invQm);
b:=BasisMatrix(lat);
time be,Te:=EchelonForm(b);
lat2:=Lattice(be);
time lat3:=PureLattice(lat2);

ratb:=BasisMatrix(lat3);
rb:=[];
for i in [1..p] do
	rb[i]:=[];
	for j in [1..2*p-1] do
		rb[i][j]:=&+[ratb[i][(j-1)*2*p+k]*bas[k] : k in [1..2*p]];
	end for;
end for;
rb:=Matrix(rb);
EL:=BaseChange(E,L);
ELs,w:=WeierstrassModel(EL);
wc:=DefiningEquations(w);

RL<X,Y>:=PolynomialRing(L,2);
sb:=[];
sb[1]:=RR!1;
for i in [1..(p-1)] do
sb[2*i]:=X^i;
sb[2*i+1]:=X^(i-1)*Y;
end for;

sx:=Evaluate(wc[1],[X,Y,1]);
sy:=Evaluate(wc[2],[X,Y,1]);
rbf:=[&+[rb[i][j]*Evaluate(sb[j],[sx,sy]) : j in [1..2*p-1]] : i in [1..p]];

rbmw:=[[MonomialCoefficient(RL!rbf[i],RL!sb[j]) : j in [1..2*p-1]] : i in [1..p]];
rbmw:=Matrix(rbmw);

function rs(M);
//restriction of scalars
r:=Rows(M);
r1:=[];
for i in [1..#r] do
r1[i]:=[];
for j in [1..#Eltseq(r[i])] do r1[i]:=r1[i] cat Eltseq(OL!r[i][j]); end for;
end for;
return Matrix(r1);
end function;

function irs(N);
r:=Rows(N);
cn:=#Rows(Transpose(N)) div (2*p);
r1:=[];
for i in [1..#r] do 
r1[i]:=[];
for j in [1..cn] do 
	r1[i][j]:=&+[N[i][(j-1)*2*p+k]*bas[k] : k in [1..2*p]];
end for;
end for;
return Matrix(L,r1);
end function;

rbrs:=rs(rbmw);
latw:=Lattice(rbrs);
latp:=PureLattice(latw);
rb2:=irs(Matrix(Basis(latp)));
rb:=rb2; rbsave:=rb;

print "The matrix specifiying a basis of the Riemann-Roch L(D') space, computed using Algorithm 5.1  that corresponds to a minimal model of the Kolyvagin class";
rb;


//Code for computing the reduction covariant of C->P^{p-1}. This is done by computing matrices representing the action of E[p] on P^{p-1} using floating point approximations for points in E[p].
//The procedure is based on the method described in "Minimization and reduction of 2-,3- and 4-coverings of elliptic curves" by Cremona, Fisher and Stoll.

prec:=750;

function red(rb,prec);
Cf:=ComplexField(prec);

RR<X,Y>:=PolynomialRing(Cf,2);
sb:=[];
sb[1]:=RR!1;
for i in [1..(p-1)] do
sb[2*i]:=X^i;
sb[2*i+1]:=X^(i-1)*Y;
end for;


rb_ip:=[&+[RR!Evaluate(rb[j][i],p1 : Precision:=prec)*sb[i] : i in [1..2*p-1]] : j in [1..p]];
Rconj2:=[(w^(-1))(ELs!r) : r in Rconj];
Rc:=[[Evaluate(Rconj2[k][j],p1 : Precision:=prec) : j in [1..2]] : k in [1..p]];
rp,ip:=Explode(Periods(E : Precision:=prec));
lR:=[EllipticLogarithm(E,r) : r in Rc];
lP:=[&+[-lR[i]: i in [1..k]]: k in [1..p-1]];

slP:=&+[P : P in lP]/p;
flexP:=[];
fPE:=[];
fP:=[];
for i in [1..p] do
	flexP[i]:=[];
	fPE[i]:=[];
	fP[i]:=[];
	for j in [1..p] do
	flexP[i][j]:=slP+(i*rp+j*ip)/p;	
	fPE[i][j]:=EllipticExponential(E,flexP[i][j]);
	fP[i][j]:=[Evaluate(rb_ip[k],fPE[i][j]) : k in [1..p]]; 
	end for;
end for;

tM:=[fP[1][j] : j in [1..p-1]];
tM[p]:=fP[2][1];
tM1:=Transpose(Matrix(tM));

tMi:=tM1^(-1);
fl:=tMi*Matrix(Cf,p,1,fP[2][2]);

tM2:=[Transpose(tM1)[i]*fl[i][1] : i in [1..p]];
tMs:=Transpose(Matrix(tM2));

tM:=[fP[1][j] : j in [2..p]];
tM[p]:=fP[2][2];
tM1:=Transpose(Matrix(tM));

tMi:=tM1^(-1);
fl:=tMi*Matrix(Cf,p,1,fP[2][3]);

tM2:=[Transpose(tM1)[i]*fl[i][1] : i in [1..p]];
tMt:=Transpose(Matrix(tM2));

trM1:=tMt*tMs^(-1);


tM:=[fP[j][1] : j in [1..p-1]];
tM[p]:=fP[1][2];
tM1:=Transpose(Matrix(tM));

tMi:=tM1^(-1);
fl:=tMi*Matrix(Cf,p,1,fP[2][2]);

tM2:=[Transpose(tM1)[i]*fl[i][1] : i in [1..p]];
tMs:=Transpose(Matrix(tM2));

tM:=[fP[j][1] : j in [2..p]];
tM[p]:=fP[2][2];
tM1:=Transpose(Matrix(tM));

tMi:=tM1^(-1);
fl:=tMi*Matrix(Cf,p,1,fP[3][2]);

tM2:=[Transpose(tM1)[i]*fl[i][1] : i in [1..p]];
tMt:=Transpose(Matrix(tM2));

trM2:=tMt*tMs^(-1);

trM1:=trM1/(AbsoluteValue(Determinant(trM1))^(1/p));
trM2:=trM2/(AbsoluteValue(Determinant(trM2))^(1/p));

tr:=[[trM1^(i)*trM2^(j) : j in [1..p]] : i in [1..p]];

gM:=&+[ConjugateTranspose(M)*M : M in Explode(tr)];
gMr:=[[Real(gM[i][j]) : i in [1..p]] : j in [1..p]];
gM:=Matrix(gMr);

return gM;
end function;


gM:=red(rb,prec);
gMr,rM:=LLLGram(gM);
rb:=Matrix(L,Transpose(rM^(-1)))*Matrix(L,rb);
rbf:=[&+[rb[j][i]*Pw[i] : i in [1..2*p-1]] : j in [1..p]];

print "The reduction covariant of the genus one model before reduction";
gM;

print "The change of coordinates used to reduce the model and the reduction covariant after reduction";
rM;
gMr;

// rbf is the minimized and reduced basis of Riemann-Roch space that defines the Kolyvagin class. Final step is to compute a basis of quadrics that defines the curve.
// Each monomial rbf[i]*rbf[j] is expressed as a power series in the uniformizing parameter tl at 0_E.
//	Quadrics in the linear combinations of monomials c[i,j]*rbf[i]*rbf[j]. 
//	By equating the power series coefficients of these combinations to zero we get linear relations on c[i,j]



quad:=[[rbf[i]*rbf[j] : j in [1..p]]:i in [1..p]];
_,ptf:=FormalLog(EL : Precision:=4*p-1);
RL<tl>:=Parent(ptf[1]);
qe:=[[Evaluate(quad[i][j],[ptf[1],ptf[2]]) : i in [1..p]] : j in [1..p]];

s:=0;
q:=[];
for i in [1..p] do
	for j in [i..p] do
		s:=s+1;
		q[s]:=[Coefficient(qe[i][j],-k) : k in [2*p-2..4*p-2]];
	end for;
end for;
q:=Matrix(q);

	qQ:=[];
	for i in [1..#Rows(q)] do
		qQ[i]:=[];
		for k in [1..2*p] do
		qQ[i]:=qQ[i] cat [(q[i][j])[k] :  j in [1..2*p+1]];
		end for;
		
	end for;
qQ:=Matrix(qQ);	

q_eq:=Submatrix(qQ,[1..s],[1..2*p]);
den:=RationalGCD(Eltseq(q_eq));
q_eq:=Matrix(Integers(),q_eq/den);
ker:=Kernel(q_eq);
qB:=BasisMatrix(ker);
l1:=PureLattice(Lattice(qB));
qB:=BasisMatrix(l1);

PQr<[x]>:=PolynomialRing(Rationals(),p);
quad:=[];
for k in [1..p*(p-3) div 2] do
s:=0;
quad[k]:=PQr!0;
for i in [1..p] do	
	for j in [i..p] do
		s:=s+1;
		quad[k]:=quad[k]+PQr.i*PQr.j*qB[k][s];
	end for;
end for;
end for;


gM:=red(rb,prec);
gMr,rM:=LLLGram(gM);
rb:=Matrix(L,Transpose(rM^(-1)))*Matrix(L,rb);

rbf:=[&+[rb[j][i]*Pw[i] : i in [1..2*p-1]] : j in [1..p]];

quad:=[[rbf[i]*rbf[j] : j in [1..p]]:i in [1..p]];
_,ptf:=FormalLog(EL : Precision:=4*p-1);
RL<tl>:=Parent(ptf[1]);
qe:=[[Evaluate(quad[i][j],[ptf[1],ptf[2]]) : i in [1..p]] : j in [1..p]];

s:=0;
q:=[];
for i in [1..p] do
	for j in [i..p] do
	s:=s+1;
	q[s]:=[Coefficient(qe[i][j],-k) : k in [2*p-2..4*p-2]];
	end for;
end for;
q:=Matrix(q);

	qQ:=[];
	for i in [1..#Rows(q)] do
		qQ[i]:=[];
		for k in [1..2*p] do
		qQ[i]:=qQ[i] cat [(q[i][j])[k] :  j in [1..2*p+1]];
		end for;
		
	end for;
qQ:=Matrix(qQ);	

q_eq:=Submatrix(qQ,[1..s],[1..2*p]);
den:=RationalGCD(Eltseq(q_eq));
q_eq:=Matrix(Integers(),q_eq/den);
ker:=Kernel(q_eq);
qB:=BasisMatrix(ker);
l1:=PureLattice(Lattice(qB));
qB:=BasisMatrix(l1);

PQr<[x]>:=PolynomialRing(Rationals(),p);
quad:=[];
for k in [1..p*(p-3) div 2] do
s:=0;
quad[k]:=PQr!0;
for i in [1..p] do	
	for j in [i..p] do
		s:=s+1;
		quad[k]:=quad[k]+PQr.i*PQr.j*qB[k][s];
	end for;
end for;
end for;

I:=ideal<PQr|quad>;
X:=Proj(PQr/I);

if p ne 3 then
	print "Equations for the curve C that represents the Kolyvagin class";
	quad;
end if;

//if p=3, then C is cut out by a ternary cubic rather than quadrics.

if p eq 3 then 
FL<x,y>:=FunctionField(EL);
sb:=[];
sb[1]:=FL!1;
for i in [1..(p-1)] do
sb[2*i]:=x^i;
sb[2*i+1]:=x^(i-1)*y;
end for;
ef:=[&+[rb[i][j]*sb[j] : j in [1..2*p-1]] : i in [1..p]];
PL:=ProjectiveSpace(L,p-1);
em:=map<EL->PL|[FL!e : e in ef]>;
F:=Equation(Image(em));

PQr<x,y,z>:=PolynomialRing(Rationals(),p);
F:=PQr!F;
F:=F/RationalGCD(Coefficients(F));


print "The equation of the curve C that represents the Kolyvagin class";
	F;

end if;

X;
end procedure;
time kol(E,D,p,prec,false);
